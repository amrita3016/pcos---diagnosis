# -*- coding: utf-8 -*-
"""pcos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NbgTY0G0Z8HPtMo5WR46uNZneXQmnhyn
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np          #importing necessary libraries
import pandas as pd
import matplotlib.pyplot as plt 
# %matplotlib inline 
import seaborn as sns

df = pd.read_csv("/content/PCOS_data_without_infertility.csv")      #Connecting to dataset

#Exploratory Data Analysis

df

df.columns

df.shape

df.head()

#Data Cleaning

df.drop(['Sl. No','Patient File No.'],axis=1, inplace = True)

"""# New Section"""

df = df[df["BMI"].str.contains("#NAME?") == False]

df

df.drop(['Blood Group','Unnamed: 44','Weight (Kg)'],axis =1, inplace = True)

df

df.drop(['No. of aborptions','Avg. F size (L) (mm)', 'Avg. F size (R) (mm)'], axis=1, inplace=True)

df.drop(['RR (breaths/min)', 'Hb(g/dl)','Hip(inch)', 'Waist(inch)', 'RBS(mg/dl)', 'Hair loss(Y/N)','Reg.Exercise(Y/N)'], axis=1, inplace=True)

df.drop(['Pulse rate(bpm) ','Marraige Status (Yrs)', 'Pregnant(Y/N)','PRL(ng/mL)', 'Waist:Hip Ratio','Pimples(Y/N)',], axis=1, inplace=True)

df

df.columns

df.drop(['  I   beta-HCG(mIU/mL)', 'II    beta-HCG(mIU/mL)','Vit D3 (ng/mL)'], axis=1, inplace=True)

df.columns

df.isnull().sum()   #checking missing values

#df.drop(['Unnamed: 44'], axis = 1, inplace = True)

df.drop(['BP _Systolic (mmHg)','BP _Diastolic (mmHg)','FSH/LH','Fast food (Y/N)','Weight gain(Y/N)'], axis = 1, inplace = True)

df.shape

df

df.isnull().values.any()

df.describe()   #data analysis

df.corr()

from sklearn.preprocessing import StandardScaler    
scaler = StandardScaler()

#df.drop(['Unnamed: 44'], axis=1, inplace=True)
df.shape

#df.drop(['Weight (Kg)'], axis=1, inplace=True)

df.drop(['Height(Cm) '], axis=1, inplace=True)

df.columns

df.isnull().sum()   #checking missing values

X = df.iloc[:,0:19]
X = df.drop('PCOS (Y/N)',axis=1)

X.head()

y = df.iloc[:,0]
y.head(10)

scaler.fit(X)
X = scaler.transform(X)

from sklearn.model_selection import train_test_split    #Splitting dataset into train and test

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size= 0.3,random_state = 25)

X=df.drop(["PCOS (Y/N)"],axis = 1)
from sklearn.ensemble import ExtraTreesClassifier
import matplotlib.pyplot as plt
model = ExtraTreesClassifier()
model.fit(X,y)
print(model.feature_importances_)
feat_importances = pd.Series(model.feature_importances_, index=X.columns)
feat_importances.nlargest(35).plot(kind='barh')
plt.rcParams["figure.figsize"] = (3,3)
plt.show()

#Applying Naive Bayes Classification
from sklearn.naive_bayes import GaussianNB     
from sklearn import metrics

classifier = GaussianNB()
classifier.fit(X_train,y_train)
y_pred = classifier.predict(X_test)

#Data Visulization
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,y_pred)
f,ax = plt.subplots(figsize=(7,5))

sns.heatmap(cm,annot = True,linewidths = 0.5,linecolor="blue",fmt = ".0f",ax = ax)
plt.show()
plt.savefig("Confusionmatrix.png")

print(metrics.accuracy_score(y_test,y_pred))       #predicted accuracy

from sklearn.metrics import f1_score   #f1score= harmonic mean of precision and recall
f1_score_va = f1_score(y_test,y_pred)
print(f1_score_va)

#Applying Random Forest CLassifier
from sklearn.ensemble import RandomForestClassifier
rf_clf = RandomForestClassifier(criterion='entropy')   
rf_clf.fit(X_train,y_train)

y_predict = rf_clf.predict(X_test)

from sklearn.metrics import accuracy_score,classification_report,confusion_matrix   #Accuracy predicted
accuracy_score(y_test,y_predict)

corrmat = df.corr()
plt.subplots(figsize=(8,8))
sns.heatmap(corrmat,cmap="Pastel1", square=True);



